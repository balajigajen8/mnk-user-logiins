AWSTemplateFormatVersion: '2010-09-09'
Description: EKS Cluster for Laravel User Login System (mnk-user-logins)

Resources:

  # EKS Cluster Role
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'eks.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'EKSClusterFullAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'eks:DescribeCluster'
                  - 'eks:ListClusters'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeVpcs'
                  - 'iam:PassRole'
                Resource: '*'

  # EKS Cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: "mnk-user-logins-cluster"
      RoleArn: arn:aws:iam::650251721226:role/eksServiceRole  # Replace with your EKS service role ARN
      ResourcesVpcConfig:
        SubnetIds:
          - subnet-0fdc7d89e2b460ee1  # Replace with your subnet IDs
        SecurityGroupIds:
          - sg-044b4b6bf5141af7f  # Replace with your Security Group ID
        EndpointPublicAccess: true
        EndpointPrivateAccess: false

  # ECR Repository for Laravel App
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "mnk-user-logins-repo"

  # Worker Node Role
  EKSWorkerNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'EKSWorkerNodeFullAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeSubnets'
                  - 'eks:DescribeCluster'
                  - 'iam:PassRole'
                  - 'autoscaling:DescribeAutoScalingGroups'
                  - 'cloudwatch:PutMetricData'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource: '*'

  # Node Group (EKS Worker Nodes)
  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: "mnk-user-logins-nodegroup"
      NodeRole: !Ref EKSWorkerNodeRole
      Subnets:
        - subnet-0fdc7d89e2b460ee1  # Replace with your subnet IDs
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 2
      InstanceTypes:
        - t3.medium  # Modify based on your needs

  # Kubernetes Deployment for Laravel App
  LaravelAppDeployment:
    Type: Custom::KubernetesManifest
    Properties:
      ServiceToken: arn:aws:lambda:ap-south-1:650251721226:function:mnk-user-logins  # Lambda function to manage kubectl
      Manifest: |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: mnk-user-logins
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: mnk-user-logins
          template:
            metadata:
              labels:
                app: mnk-user-logins
            spec:
              containers:
                - name: laravel-app
                  image: "650251721226.dkr.ecr.ap-south-1.amazonaws.com/mnk-user-logins-repo:latest"  # Replace with your ECR image URL
                  ports:
                    - containerPort: 80

Outputs:
  EKSClusterName:
    Value: !Ref EKSCluster
    Description: "EKS Cluster Name"
  ECRRepositoryUri:
    Value: !GetAtt ECRRepository.RepositoryUri
    Description: "URI of the ECR repository"
