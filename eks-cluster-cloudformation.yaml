AWSTemplateFormatVersion: '2010-09-09'
Description: EKS Cluster with One Node Group for Simpler Setup

Resources:
  # IAM Role for EKS Cluster
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "eks.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "EKSClusterFullAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "eks:DescribeCluster"
                  - "eks:ListClusters"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeVpcs"
                  - "iam:PassRole"
                Resource: "*"

  # EKS Cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: "simple-eks-cluster"
      RoleArn: !GetAtt EKSClusterRole.Arn  # Using intrinsic function to reference created IAM Role
      ResourcesVpcConfig:
        SubnetIds:
          - subnet-0fdc7d89e2b460ee1 # Replace with your subnet IDs
        SecurityGroupIds:
          - sg-044b4b6bf5141af7f # Replace with your Security Group ID
        EndpointPublicAccess: true
        EndpointPrivateAccess: false

  # Worker Node Role
  EKSWorkerNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "EKSWorkerNodeFullAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeSubnets"
                  - "eks:DescribeCluster"
                  - "iam:PassRole"
                  - "autoscaling:DescribeAutoScalingGroups"
                  - "cloudwatch:PutMetricData"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "*"

  # Instance Profile for Worker Nodes
  EKSWorkerNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EKSWorkerNodeRole

  # Launch Template for Node Group
  EKSNodeGroupLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t3.medium  # Choose your instance type
        AmiId: ami-0a000743ba7b9d393  # Replace with the AMI ID you want to use
        KeyName: mnk  # Replace with your EC2 Key Pair name for SSH access
        IamInstanceProfile:
          Arn: !GetAtt EKSWorkerNodeInstanceProfile.Arn  # Referencing the created Instance Profile
        SecurityGroups:
          - sg-044b4b6bf5141af7f  # Replace with your Security Group ID
        UserData: !Sub |
          #!/bin/bash
          /etc/eks/bootstrap.sh ${ClusterName}

  # EKS Node Group
  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: "simple-nodegroup"
      Subnets:
        - subnet-0fdc7d89e2b460ee1  # Replace with your subnet IDs
        - subnet-0b0a0583d221d317b  # Replace with your subnet IDs
      NodeRole: !Ref EKSWorkerNodeRole
      ScalingConfig:
        MinSize: 1
        MaxSize: 1
        DesiredSize: 1  # Set this to 1 for a single node in the node group
      LaunchTemplate:
        LaunchTemplateId: !Ref EKSNodeGroupLaunchTemplate
      RemoteAccess:
        Ec2SshKey: mnk  # Replace with your EC2 Key Pair name for SSH access

Outputs:
  EKSClusterName:
    Value: !Ref EKSCluster
    Description: "EKS Cluster Name"

  NodeGroupName:
    Value: !Ref EKSNodeGroup
    Description: "Node Group Name"
